/*! 
  glMultiSelect v(0.0.23) 
  (c) 2013-2015
  https://gluenetworks.kilnhg.com/Code/Web-Development
  Release Date: 2015-05-07 
*/

angular.module("glMultiSelect", [ "glChosen" ]), angular.module("glMultiSelect").directive("glMultiSelect", [ "$compile", "$timeout", function(a) {
    "use strict";
    return {
        restrict: "E",
        scope: {
            settings: "=",
            api: "="
        },
        link: function(b, c) {
            function d() {
                c.children().remove(), b.api._data.editable = !0, k = "<select " + q + ' style="width: 100%;" chosen ' + r + ' data-ng-model="api._data.value" data-ng-options="option.value as option.label group by option.group for option in api._data.options"><option value=""></option></select>', 
                h = angular.element(k), b.api._data.disabled && h.attr("disabled", !0), c.append(a(h)(n)), 
                h.on("chosen:ready", function() {
                    e(b.api._data.value), c.find(".chosen-results").attr("data-gl-super-scroll", "data-gl-super-scroll"), 
                    g();
                }), angular.isFunction(b.api._data.onChange) && h.on("change", function(a) {
                    b.api._data.onChange(a);
                });
            }
            function e(a) {
                var b = c.children(".chosen-container");
                (angular.isString(a) || angular.isArray(a)) && a.length ? b.removeClass("gl-empty") : b.addClass("gl-empty");
            }
            function f() {
                c.children().remove(), b.api._data.editable = !1, m = '<label class="gl-multi-select-label" data-ng-bind="api._data.label"></label><p class="gl-multi-select-value" data-ng-bind="api._data.value"></p>', 
                i = angular.element(m), c.append(a(i)(n));
            }
            function g() {
                angular.isUndefined(j) || j.remove(), b.api._data.editable && (b.api._data.valid ? (h.removeClass(o), 
                c.find(".chosen-container").removeClass(o)) : (h.addClass(o), c.find(".chosen-container").addClass(o), 
                angular.isString(b.api._data.error) && (j = a(angular.element(l))(b), c.append(j))));
            }
            var h, i, j, k, l, m, n = b.$new(), o = "gl-invalid";
            l = '<p class="gl-error-msg" data-ng-bind="api._data.error"></p>';
            var p = {
                noResultsText: "no-results-text",
                allowSingleDeselect: "allow-single-deselect",
                disableSearchThreshold: "disable-search-threshold",
                disableSearch: "disable-search",
                enableSplitWordSearch: "enable-split-word-search",
                inheritSelectClasses: "inherit-select-classes",
                maxSelectedOptions: "max-selected-options",
                searchContains: "search-contains",
                singleBackstrokeDelete: "single-backstroke-delete",
                displayDisabledOptions: "display-disabled-options",
                displaySelectedOptions: "display-selected-options",
                multiple: "multiple"
            };
            b.api = b.api || {}, b.api._data = {}, b.api._data.value = angular.isUndefined(b.settings.value) ? void 0 : b.settings.value, 
            b.api._data.autoClose = angular.isUndefined(b.settings.autoClose) ? !1 : b.settings.autoClose, 
            b.api._data.valid = angular.isUndefined(b.settings.valid) ? !0 : b.settings.valid, 
            b.api._data.name = angular.isUndefined(b.settings.name) ? void 0 : b.settings.name, 
            b.api._data.id = angular.isUndefined(b.settings.id) ? void 0 : b.settings.id, b.api._data.disabled = angular.isUndefined(b.settings.disabled) ? !1 : b.settings.disabled, 
            b.api._data.placeholder = angular.isString(b.settings.placeholder) ? b.settings.placeholder : "&nbsp;", 
            // &nbsp; HACK for image placeholder as chosen puts in its own text if you dont supply a placeholder
            b.api._data.label = angular.isUndefined(b.settings.label) ? angular.isUndefined(b.settings.placeholder) ? void 0 : b.settings.placeholder : b.settings.label, 
            b.api._data.error = angular.isUndefined(b.settings.error) ? void 0 : b.settings.error, 
            b.api._data.editable = angular.isUndefined(b.settings.editable) ? !0 : b.settings.editable, 
            b.api._data.options = angular.isUndefined(b.settings.options) ? void 0 : b.settings.options, 
            b.api._data.onChange = angular.isFunction(b.settings.onChange) ? function(a) {
                b.settings.onChange(a, {
                    id: b.api._data.id,
                    name: b.api._data.name,
                    settings: b.settings
                });
            } : void 0;
            var q = angular.isUndefined(b.api._data.id) ? "" : "id=" + b.api._data.id + '"', r = "";
            angular.forEach(p, function(a, c) {
                angular.isUndefined(b.settings[c]) || 1 != b.settings[c] || angular.isUndefined(a) || (r += a + " ");
            }), r += 'data-placeholder="' + b.api._data.placeholder + '" ', b.api.setLabel = function(a) {
                b.api._data.label = a;
            }, b.api.getLabel = function() {
                return b.api._data.label;
            }, b.api.view = function() {
                f();
            }, b.api.edit = function() {
                d();
            }, b.api.setInvalid = function(a) {
                b.api._data.valid = !1, b.api._data.error = angular.isString(a) ? a : void 0, g();
            }, b.api.setValid = function() {
                b.api._data.valid = !0, g();
            }, b.api.setValue = function(a) {
                b.api._data.value = a;
            }, b.api.getValue = function() {
                return b.api._data.value;
            }, b.api.setOptions = function(a) {
                b.api._data.options = a;
            }, b.api.getOptions = function() {
                return b.api._data.options;
            }, b.api.disable = function() {
                b.api._data.disabled = !0, h.attr("disabled", !0).trigger("chosen:updated");
            }, b.api.enable = function() {
                b.api._data.disabled = !1, h.removeAttr("disabled").trigger("chosen:updated");
            }, // INIT
            angular.isUndefined(b.settings.view) || 1 != b.settings.view ? d() : f();
        }
    };
} ]);
//# sourceMappingURL=glmultiselect.min.js.map